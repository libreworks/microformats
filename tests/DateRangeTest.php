<?php
namespace Libreworks\Microformats;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-04 at 09:38:59.
 */
class DateRangeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers Libreworks\Microformats\DateRange::__construct
     * @covers Libreworks\Microformats\DateRange::getFrom
     * @covers Libreworks\Microformats\DateRange::getTo
     * @covers Libreworks\Microformats\DateRange::getInterval
     */
    public function testGetters()
    {
        $a = new \DateTime('2015-05-01T04:01:03-0400');
        $b = new \DateTime('2015-06-15T04:01:03-0400');
        $o = new DateRange($b, $a);
        $this->assertEquals(\DateTimeImmutable::createFromMutable($a), $o->getFrom());
        $this->assertEquals(\DateTimeImmutable::createFromMutable($b), $o->getTo());
        $this->assertEquals($a->diff($b), $o->getInterval());
    }

    /**
     * @covers Libreworks\Microformats\DateRange::intersects
     */
    public function testIntersects()
    {
        $a = new DateRange(new \DateTime('2015-05-01T04:01:03-0400'), new \DateTime('2015-06-15T04:01:03-0400'));
        $b = new DateRange(new \DateTime('2015-04-02T05:02:04-0400'), new \DateTime('2015-07-16T05:02:04-0400'));
        $c = new DateRange(new \DateTime('2014-04-02T05:02:04-0400'), new \DateTime('2014-07-16T05:02:04-0400'));
        $d = new DateRange(new \DateTime('2015-02-02T05:02:04-0400'), new \DateTime('2015-05-16T05:02:04-0400'));
        
        $this->assertTrue($a->intersects($a));
        $this->assertTrue($a->intersects($b));
        $this->assertTrue($b->intersects($a));
        $this->assertFalse($a->intersects($c));
        $this->assertFalse($c->intersects($a));
        $this->assertTrue($b->intersects($d));
        $this->assertTrue($d->intersects($b));
    }
    
    /**
     * @covers Liberworks\Microformats\DateRange::contains
     */
    public function testContains()
    {
        $a = new \DateTime('2015-05-01T04:01:03-0400');
        $b = new \DateTime('2015-06-15T04:01:03-0400');
        $c = new \DateTime('2015-04-02T05:02:04-0400');
        $d = new \DateTime('2015-07-16T05:02:04-0400');
        $o = new DateRange($c, $b);
        $this->assertTrue($o->contains($a));
        $this->assertTrue($o->contains($b));
        $this->assertTrue($o->contains($c));
        $this->assertFalse($o->contains($d));
    }
    
    /**
     * @covers Liberworks\Microformats\DateRange::combine
     */
    public function testCombine()
    {
        $a = new \DateTime('2015-05-01T04:01:03-0400');
        $b = new \DateTime('2015-06-15T04:01:03-0400');
        $c = new \DateTime('2015-04-02T05:02:04-0400');
        $d = new \DateTime('2015-07-16T05:02:04-0400');
        $o1 = new DateRange($a, $b);
        $o2 = new DateRange($c, $d);
        $o3 = $o1->combine($o2);
        $this->assertEquals(\DateTimeImmutable::createFromMutable($c), $o3->getFrom());
        $this->assertEquals(\DateTimeImmutable::createFromMutable($d), $o3->getTo());
        $this->assertEquals($c->diff($d), $o3->getInterval());
        $o4 = new DateRange($c, $b);
        $o5 = new DateRange($a, $d);
        $o6 = $o4->combine($o5);
        $this->assertEquals(\DateTimeImmutable::createFromMutable($c), $o6->getFrom());
        $this->assertEquals(\DateTimeImmutable::createFromMutable($d), $o6->getTo());
        $this->assertEquals($c->diff($d), $o6->getInterval());
    }

    /**
     * @covers Liberworks\Microformats\DateRange::combine
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Cannot combine date ranges that do not intersect
     */
    public function testCombineBad()
    {
        $a = new \DateTime('2015-05-01T04:01:03-0400');
        $b = new \DateTime('2015-06-15T04:01:03-0400');
        $c = new \DateTime('2015-04-02T05:02:04-0400');
        $d = new \DateTime('2015-07-16T05:02:04-0400');
        $o1 = new DateRange($c, $a);
        $o2 = new DateRange($b, $d);
        $o1->combine($o2);
    }

    /**
     * @covers Libreworks\Microformats\DateRange::__toString
     */
    public function testToString()
    {
        $a = new DateRange(new \DateTime('2015-05-01T04:01:03-0400'), new \DateTime('2015-06-15T04:01:03-0400'));
        $this->assertEquals('2015-05-01T04:01:03-0400â€“2015-06-15T04:01:03-0400', $a->__toString());
    }
}
